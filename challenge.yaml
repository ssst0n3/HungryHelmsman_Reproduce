
# create namespace flag-receiver
apiVersion: v1
kind: Namespace
metadata:
  name: flag-receiver
  labels:
    pod-security.kubernetes.io/enforce: "restricted"
---
# create namespace flag-sender
apiVersion: v1
kind: Namespace
metadata:
  name: flag-sender
---
# create sa ctf-player
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctf-player
---
# create flag secret
apiVersion: v1
kind: Secret
metadata:
  name: flag
  namespace: flag-sender
type: Opaque
data:
  flag: cG90bHVja3trdWJlcm5ldGVzX2Nhbl9iZV9hX2JpdF93ZWlyZH0=
---
# create flag-sender pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flag-sender
  namespace: flag-sender
  labels:
    app: flag-sender
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flag-sender
  template:
    metadata:
      labels:
        app: flag-sender
    spec:
      containers:
      - name: container
        image: busybox
        imagePullPolicy: IfNotPresent
        command:
        - sh
        args:
        - -c
        - while true; do echo $FLAG | nc 1.1.1.1 80 || continue; echo 'Flag Send'; sleep 10; done
        env:
        - name: FLAG
          valueFrom:
            secretKeyRef:
              name: flag
              key: flag
      restartPolicy: Always
      serviceAccountName: default
      dnsPolicy: ClusterFirst
      securityContext: {}
---
# create network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flag-receiver
  namespace: flag-receiver
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          ns: flag-sender
      podSelector:
        matchLabels:
          app: flag-sender
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# setup rbac
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ctf-player
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ctf-player
subjects:
- kind: ServiceAccount
  name: ctf-player
  namespace: default
roleRef:
  kind: ClusterRole
  name: ctf-player
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: flag-receiver
  name: ctf-player
rules:
- apiGroups: [""]
  resources: ["pods.*"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "create", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["services.*"]
  verbs: ["create", "delete"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "create", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["list", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ctf-player
  namespace: flag-receiver
subjects:
- kind: ServiceAccount
  name: ctf-player
  namespace: default
roleRef:
  kind: Role
  name: ctf-player
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: flag-sender
  name: ctf-player
rules:
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ctf-player
  namespace: flag-sender
subjects:
- kind: ServiceAccount
  name: ctf-player
  namespace: default
roleRef:
  kind: Role
  name: ctf-player
  apiGroup: rbac.authorization.k8s.io
